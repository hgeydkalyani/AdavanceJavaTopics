Theory of Employee Management System using JDBC (DAO, Service, Controller)
1. Introduction

This project is based on JDBC (Java Database Connectivity).
It follows the 3-layered architecture:

DAO Layer (Data Access Object) â€“ Direct interaction with database.

Service Layer â€“ Business logic and validations.

Controller Layer â€“ Takes user input, calls service methods, and shows output.

This design pattern makes the code clean, reusable, and maintainable.

2. DAO Layer (Data Access Object)

ðŸ“‚ com.dao.Employee_Dao

Purpose: To connect Java with MySQL database and perform CRUD operations.

Key Methods:

Connect() â†’ Establishes connection with MySQL using DriverManager.

Insertdata(id, name, city) â†’ Inserts a new employee record.

Deletedata(id) â†’ Deletes employee by ID.

SelectAlldata() â†’ Fetches all employee records.

SelectData() â†’ Fetches one employee by ID.

Upadatedata() â†’ Updates employee details.

ðŸ‘‰ In DAO layer we always use PreparedStatement (instead of Statement) because:

Prevents SQL Injection.

Better performance for repeated queries.

Easy to set parameters (setInt(), setString() etc.).

3. Service Layer

ðŸ“‚ com.service.EmployeeService

Purpose: Acts as a bridge between Controller and DAO.

Responsibilities:

Validate data before sending to DAO.

Call DAO methods.

Handle exceptions gracefully.

Example:

If user enters negative ID â†’ Service can check and stop invalid data from going to database.

If DAO throws exception â†’ Service catches and shows a proper error message.

ðŸ‘‰ This layer makes the code flexible (Business logic can change without touching DAO).

4. Controller Layer

ðŸ“‚ com.controller.EmployeeController

Purpose: Handles user interaction (like UI).

Uses Scanner to take input from user.

Displays a menu:

Add Employee

Delete Employee

Find Employee

List All Employees

Update Employee

Exit

Calls Service methods according to userâ€™s choice.

Example:

If user selects option 1 â†’ Controller asks for id, name, city â†’ Passes it to service.addEmployee() â†’ Which calls DAO â†’ Data is stored in MySQL.

5. Flow of Data (Step by Step)

User chooses option from Controller.

Controller sends request to Service Layer.

Service validates input and calls DAO Layer.

DAO executes SQL query in MySQL database.

Result travels back from DAO â†’ Service â†’ Controller â†’ User.

6. Advantages of This Design

âœ… Clean separation of concerns (each layer has its own role).
âœ… Easy to maintain and update code.
âœ… Service layer makes the system more secure (validation).
âœ… Reusability of DAO methods.
âœ… Professional coding practice (used in real projects).

7. Technologies Used

Java (JDK)

MySQL Database

JDBC API (Connection, PreparedStatement, ResultSet)




âš¡ Flow of MVC

Controller â†’ takes user input (ID, Name, City, etc.).

Service â†’ validates input & calls DAO.

DAO â†’ executes SQL queries in MySQL.

Output â†’ goes back to Service â†’ then printed by Controller.
















